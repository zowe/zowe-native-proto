/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 *
 */

// Code generated by convertTypes.ts. DO NOT EDIT.

#ifndef REQUESTS_HPP
#define REQUESTS_HPP

#include "../validator.hpp"

struct IssueConsoleRequest {};
ZJSON_SCHEMA(IssueConsoleRequest,
    FIELD_REQUIRED(commandText, STRING),
    FIELD_OPTIONAL(consoleName, STRING)
);

struct IssueTsoRequest {};
ZJSON_SCHEMA(IssueTsoRequest,
    FIELD_REQUIRED(commandText, STRING)
);

struct IssueUnixRequest {};
ZJSON_SCHEMA(IssueUnixRequest,
    FIELD_REQUIRED(commandText, STRING)
);

struct CreateDatasetRequest {};
ZJSON_SCHEMA(CreateDatasetRequest,
    FIELD_REQUIRED(dsname, STRING),
    FIELD_REQUIRED(attributes, OBJECT)
);

struct CreateMemberRequest {};
ZJSON_SCHEMA(CreateMemberRequest,
    FIELD_REQUIRED(dsname, STRING)
);

struct DeleteDatasetRequest {};
ZJSON_SCHEMA(DeleteDatasetRequest,
    FIELD_REQUIRED(dsname, STRING)
);

struct ListDatasetsRequest {};
ZJSON_SCHEMA(ListDatasetsRequest,
    FIELD_OPTIONAL(maxItems, NUMBER),
    FIELD_OPTIONAL(responseTimeout, NUMBER),
    FIELD_OPTIONAL(start, STRING),
    FIELD_REQUIRED(pattern, STRING),
    FIELD_OPTIONAL(attributes, BOOL)
);

struct ListDsMembersRequest {};
ZJSON_SCHEMA(ListDsMembersRequest,
    FIELD_OPTIONAL(maxItems, NUMBER),
    FIELD_OPTIONAL(responseTimeout, NUMBER),
    FIELD_OPTIONAL(start, STRING),
    FIELD_REQUIRED(dsname, STRING),
    FIELD_OPTIONAL(attributes, BOOL)
);

struct ReadDatasetRequest {};
ZJSON_SCHEMA(ReadDatasetRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_OPTIONAL(volume, STRING),
    FIELD_REQUIRED(dsname, STRING),
    FIELD_OPTIONAL(stream, ANY)
);

struct RestoreDatasetRequest {};
ZJSON_SCHEMA(RestoreDatasetRequest,
    FIELD_REQUIRED(dsname, STRING)
);

struct WriteDatasetRequest {};
ZJSON_SCHEMA(WriteDatasetRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_OPTIONAL(etag, STRING),
    FIELD_OPTIONAL(volume, STRING),
    FIELD_REQUIRED(dsname, STRING),
    FIELD_OPTIONAL(data, STRING),
    FIELD_OPTIONAL(stream, ANY)
);

struct CancelJobRequest {};
ZJSON_SCHEMA(CancelJobRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct DeleteJobRequest {};
ZJSON_SCHEMA(DeleteJobRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct GetJclRequest {};
ZJSON_SCHEMA(GetJclRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct GetJobStatusRequest {};
ZJSON_SCHEMA(GetJobStatusRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct HoldJobRequest {};
ZJSON_SCHEMA(HoldJobRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct ListJobsRequest {};
ZJSON_SCHEMA(ListJobsRequest,
    FIELD_OPTIONAL(maxItems, NUMBER),
    FIELD_OPTIONAL(responseTimeout, NUMBER),
    FIELD_OPTIONAL(owner, STRING),
    FIELD_OPTIONAL(prefix, STRING),
    FIELD_OPTIONAL(status, STRING)
);

struct ListSpoolsRequest {};
ZJSON_SCHEMA(ListSpoolsRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct ReadSpoolRequest {};
ZJSON_SCHEMA(ReadSpoolRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_REQUIRED(spoolId, NUMBER),
    FIELD_REQUIRED(jobId, STRING)
);

struct ReleaseJobRequest {};
ZJSON_SCHEMA(ReleaseJobRequest,
    FIELD_REQUIRED(jobId, STRING)
);

struct SubmitJclRequest {};
ZJSON_SCHEMA(SubmitJclRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_REQUIRED(jcl, STRING)
);

struct SubmitJobRequest {};
ZJSON_SCHEMA(SubmitJobRequest,
    FIELD_REQUIRED(dsname, STRING)
);

struct SubmitUssRequest {};
ZJSON_SCHEMA(SubmitUssRequest,
    FIELD_REQUIRED(fspath, STRING)
);

struct ChmodFileRequest {};
ZJSON_SCHEMA(ChmodFileRequest,
    FIELD_REQUIRED(mode, STRING),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_REQUIRED(recursive, BOOL)
);

struct ChownFileRequest {};
ZJSON_SCHEMA(ChownFileRequest,
    FIELD_REQUIRED(owner, STRING),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_REQUIRED(recursive, BOOL)
);

struct ChtagFileRequest {};
ZJSON_SCHEMA(ChtagFileRequest,
    FIELD_REQUIRED(fspath, STRING),
    FIELD_REQUIRED(tag, STRING),
    FIELD_REQUIRED(recursive, BOOL)
);

struct CreateFileRequest {};
ZJSON_SCHEMA(CreateFileRequest,
    FIELD_OPTIONAL(permissions, STRING),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_OPTIONAL(isDir, BOOL)
);

struct DeleteFileRequest {};
ZJSON_SCHEMA(DeleteFileRequest,
    FIELD_REQUIRED(fspath, STRING),
    FIELD_REQUIRED(recursive, BOOL)
);

struct ListFilesRequest {};
ZJSON_SCHEMA(ListFilesRequest,
    FIELD_OPTIONAL(maxItems, NUMBER),
    FIELD_OPTIONAL(responseTimeout, NUMBER),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_OPTIONAL(all, BOOL),
    FIELD_OPTIONAL(long, BOOL),
    FIELD_OPTIONAL(depth, NUMBER)
);

struct ReadFileRequest {};
ZJSON_SCHEMA(ReadFileRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_OPTIONAL(stream, ANY)
);

struct WriteFileRequest {};
ZJSON_SCHEMA(WriteFileRequest,
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_OPTIONAL(localEncoding, STRING),
    FIELD_OPTIONAL(etag, STRING),
    FIELD_REQUIRED(fspath, STRING),
    FIELD_OPTIONAL(data, STRING),
    FIELD_OPTIONAL(stream, ANY),
    FIELD_OPTIONAL(contentLen, NUMBER)
);

#endif
