/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 *
 */

// Code generated by generateTypes.ts. DO NOT EDIT.

#ifndef RESPONSES_HPP
#define RESPONSES_HPP

#include "../validator.hpp"

struct Dataset {};
ZJSON_SCHEMA(Dataset,
    FIELD_REQUIRED(name, STRING),
    FIELD_REQUIRED(dsorg, STRING),
    FIELD_REQUIRED(volser, STRING),
    FIELD_REQUIRED(migr, BOOL),
    FIELD_REQUIRED(recfm, STRING)
);

struct DsMember {};
ZJSON_SCHEMA(DsMember,
    FIELD_REQUIRED(name, STRING)
);

struct Job {};
ZJSON_SCHEMA(Job,
    FIELD_REQUIRED(id, STRING),
    FIELD_REQUIRED(name, STRING),
    FIELD_REQUIRED(status, STRING),
    FIELD_REQUIRED(retcode, STRING)
);

struct Spool {};
ZJSON_SCHEMA(Spool,
    FIELD_REQUIRED(id, NUMBER),
    FIELD_REQUIRED(ddname, STRING),
    FIELD_REQUIRED(stepname, STRING),
    FIELD_REQUIRED(dsname, STRING),
    FIELD_REQUIRED(procstep, STRING)
);

struct UssItem {};
ZJSON_SCHEMA(UssItem,
    FIELD_REQUIRED(name, STRING),
    FIELD_REQUIRED(links, NUMBER),
    FIELD_REQUIRED(user, STRING),
    FIELD_REQUIRED(group, STRING),
    FIELD_REQUIRED(size, NUMBER),
    FIELD_OPTIONAL(filetag, STRING),
    FIELD_REQUIRED(mtime, STRING),
    FIELD_REQUIRED(mode, STRING)
);

struct IssueConsoleResponse {};
ZJSON_SCHEMA(IssueConsoleResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(data, STRING)
);

struct IssueTsoResponse {};
ZJSON_SCHEMA(IssueTsoResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(data, STRING)
);

struct IssueUnixResponse {};
ZJSON_SCHEMA(IssueUnixResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(data, STRING)
);

struct CreateDatasetResponse {};
ZJSON_SCHEMA(CreateDatasetResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct CreateMemberResponse {};
ZJSON_SCHEMA(CreateMemberResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct DeleteDatasetResponse {};
ZJSON_SCHEMA(DeleteDatasetResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct ListDatasetsResponse {};
ZJSON_SCHEMA(ListDatasetsResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED_OBJECT_ARRAY(items, Dataset),
    FIELD_REQUIRED(returnedRows, NUMBER)
);

struct ListDsMembersResponse {};
ZJSON_SCHEMA(ListDsMembersResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED_OBJECT_ARRAY(items, DsMember),
    FIELD_REQUIRED(returnedRows, NUMBER)
);

struct ReadDatasetResponse {};
ZJSON_SCHEMA(ReadDatasetResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_REQUIRED(etag, STRING),
    FIELD_REQUIRED(data, STRING),
    FIELD_OPTIONAL(contentLen, NUMBER)
);

struct RestoreDatasetResponse {};
ZJSON_SCHEMA(RestoreDatasetResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct WriteDatasetResponse {};
ZJSON_SCHEMA(WriteDatasetResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(etag, STRING),
    FIELD_OPTIONAL(contentLen, NUMBER)
);

struct CancelJobResponse {};
ZJSON_SCHEMA(CancelJobResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct DeleteJobResponse {};
ZJSON_SCHEMA(DeleteJobResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct GetJclResponse {};
ZJSON_SCHEMA(GetJclResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(data, STRING)
);

struct GetJobStatusResponse {};
ZJSON_SCHEMA(GetJobStatusResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(id, STRING),
    FIELD_REQUIRED(name, STRING),
    FIELD_REQUIRED(status, STRING),
    FIELD_REQUIRED(retcode, STRING)
);

struct HoldJobResponse {};
ZJSON_SCHEMA(HoldJobResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct ListJobsResponse {};
ZJSON_SCHEMA(ListJobsResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED_OBJECT_ARRAY(items, Job)
);

struct ListSpoolsResponse {};
ZJSON_SCHEMA(ListSpoolsResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED_OBJECT_ARRAY(items, Spool)
);

struct ReadSpoolResponse {};
ZJSON_SCHEMA(ReadSpoolResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_REQUIRED(data, STRING)
);

struct ReleaseJobResponse {};
ZJSON_SCHEMA(ReleaseJobResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct SubmitJclResponse {};
ZJSON_SCHEMA(SubmitJclResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(jobId, STRING)
);

struct SubmitJobResponse {};
ZJSON_SCHEMA(SubmitJobResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(jobId, STRING)
);

struct SubmitUssResponse {};
ZJSON_SCHEMA(SubmitUssResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(jobId, STRING)
);

struct ChmodFileResponse {};
ZJSON_SCHEMA(ChmodFileResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct ChownFileResponse {};
ZJSON_SCHEMA(ChownFileResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct ChtagFileResponse {};
ZJSON_SCHEMA(ChtagFileResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct CreateFileResponse {};
ZJSON_SCHEMA(CreateFileResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct DeleteFileResponse {};
ZJSON_SCHEMA(DeleteFileResponse,
    FIELD_REQUIRED(success, BOOL)
);

struct ListFilesResponse {};
ZJSON_SCHEMA(ListFilesResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED_OBJECT_ARRAY(items, UssItem),
    FIELD_REQUIRED(returnedRows, NUMBER)
);

struct ReadFileResponse {};
ZJSON_SCHEMA(ReadFileResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_OPTIONAL(encoding, STRING),
    FIELD_REQUIRED(etag, STRING),
    FIELD_REQUIRED(data, STRING),
    FIELD_OPTIONAL(contentLen, NUMBER)
);

struct WriteFileResponse {};
ZJSON_SCHEMA(WriteFileResponse,
    FIELD_REQUIRED(success, BOOL),
    FIELD_REQUIRED(etag, STRING),
    FIELD_REQUIRED(created, BOOL),
    FIELD_OPTIONAL(contentLen, NUMBER)
);

#endif
