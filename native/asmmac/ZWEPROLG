         MACRO
.*
.*  This program and the accompanying materials are
.*  made available under the terms of the Eclipse Public License v2.0
.*  which accompanies this distribution, and is available at
.*  https://www.eclipse.org/legal/epl-v20.html
.*
.*  SPDX-License-Identifier: EPL-2.0
.*
.*  Copyright Contributors to the Zowe Project.
.*
.*
.*
.*  Custom prolog intended to be paired with ZWEEPILG to allow
.*  variable sized stack allocations (instead of the default 1MB).
.*
.*  Usage:
.*
.*       ZWEPROLG NEWDSA=([YES|NO],[#KBs],[subpool]),
.*         SAVE=[SA,BAKR],
.*         SAM64=[NO,YES]
.*
.*       NEWDSA=([YES|NO],[#KBs],[subpool])
.*         YES: (default) allocate new DSA
.*         NO:  use existing DSA
.*         #KBs: size of DSA in KBs (default 1024)
.*         subpool: subpool of DSA (default 132)
.*
.*       SAVE=[SA,BAKR]
.*         SA: (default) save input regs
.*         BAKR: save registers on linkage stack
.*
.*       SAM64=[NO,YES]
.*         NO:  (default) use 31-bit AMODE
.*         YES: generate SAM64 instruction
.*
.*  Commonly referenced symbols:
.*    &CCN_RHIGH
.*    &CCN_RLOW
.*    &CCN_LP64
.*    &CCN_ASCM
.*    &CCN_MAIN
.*    &CCN_LITN
.*    &CCN_RENT
.*    &CCN_DSASZ
.*    &CCN_CSECT
.*    CCN_IASM_MACRO
.*
&NAME    ZWEPROLG &NEWDSA=,&SAVE=SA,&SAM64=NO
.*
         COPY  CCNZGBL
         GBLA  &ZG_DSASZ
         GBLA  &ZG_DSASP
         GBLB  &ZG_SAVE
         GBLB  &ZG_BAKR
         GBLB  &ZG_SAM64
.*
&MACNM   SETC  '&SYSMAC(0)'
.*
&ZG_DSASZ SETA  0
&ZG_DSASP SETA  132
&ZG_SAVE  SETB  0
&ZG_BAKR  SETB  0
&ZG_SAM64 SETB  0
&IS_64    SETB  (&CCN_LP64 OR '&SAM64' EQ 'YES')
&IS_AR    SETB  ('&CCN_ASCM' EQ 'AR')
&KB#      SETA  1024
&GETDSA   SETB  0
.*
.*       Set 31 or 64 bit instructions
.*
         AIF   (&IS_64).INST64
&LHIx    SETC  'LHI '
&MHIx    SETC  'MHI '
&LRxx    SETC  'LR  '
&Lxxx    SETC  'L   '
&ARxx    SETC  'AR  '
&SLRx    SETC  'SLR '
         AGO   .CONT000
.INST64  ANOP  ,
&LHIx    SETC  'LGHI'
&MHIx    SETC  'MGHI'
&LRxx    SETC  'LGR '
&Lxxx    SETC  'LGF '
&ARxx    SETC  'AGR '
&SLRx    SETC  'SLGR'
.CONT000 ANOP  ,
.*
.*       Validate and handle SAVE= paramters
.*
         AIF   ('&SAVE' NE 'SA' AND '&SAVE' NE 'BAKR').ERR020
         AIF   ('&SAVE' EQ 'BAKR').CONT020
&ZG_SAVE SETB  1
         AGO   .CONT100
.*
.CONT020 ANOP ,
&ZG_BAKR SETB  1
         AGO   .CONT100
.*
.*       Must be NO or YES
.*
.CONT100 ANOP ,
         AIF   ('&SAM64' NE 'NO' AND '&SAM64' NE 'YES').ERR030
.*
.*       SAM64=YES may only be used with SAVE=BAKR
.*
         AIF   ('&SAVE' NE 'BAKR' AND '&SAM64' EQ 'YES').ERR040
.*
.*       Set SAM64=YES if requested
.*
         AIF   ('&SAM64' NE 'YES').CONT200
&ZG_SAM64 SETB  1
.*
.CONT200 ANOP ,
         AIF   ('&NEWDSA(1)' EQ 'YES').CONT240
         AIF   ('&NEWDSA(1)' EQ '').CONT300
         AIF   ('&NEWDSA(1)' EQ 'NO').CONT300
         AGO   .ERR010
.*
.*       Set DSA size
.*
.CONT240 ANOP ,
&GETDSA  SETB  1
         AIF   ('&NEWDSA(2)' EQ '').CONT260
&KB#     SETA  &NEWDSA(2)
.*
.*       Set DSA subpool
.*
.CONT260 ANOP ,
         AIF   ('&NEWDSA(3)' EQ '').CONT300
&ZG_DSASP  SETA  &NEWDSA(3)
.*
.*       Save input regs
.*
.CONT300 ANOP ,
         AIF   (&ZG_SAVE).CONT380
         AIF   (NOT &ZG_BAKR).CONT400
.*
.*       NOTE(Kelosky): in the future, if 31-bit caller BASSMs here
.*       we would not want to do this because we would return in
.*       the wrong AMODE.
.*
         BSM   14,0
.*
.*       If SAM64=YES, set AMODE to 64
.*
.CONT310 ANOP ,
         AIF   (NOT &ZG_SAM64).CONT320
         SAM64 ,                Set AMODE to 64
.CONT320 ANOP ,
         BAKR  14,0             Save registers on linkage stack
         AGO   .CONT400
.*
.CONT380 ANOP ,
         AIF   (&IS_64).SAVE64
         STM   14,12,12(13)     Save caller regs
         AGO   .CONT400
.SAVE64  ANOP
         STMG  14,12,8(13)      Save caller regs
.CONT400 ANOP  ,
         AIF   (NOT &GETDSA).EXIT
.*
.*       Obtain DSA
.*
         LARL  15,&CCN_LITN      -> Literals
         USING &CCN_LITN,15
.*
&ZG_DSASZ  SETA  &KB#*1024
         &LHIx 3,&KB#            Number of KBs
         &MHIx 3,1024            Multiply by 1024
*
         STORAGE OBTAIN,                                               +
               LENGTH=(3),                                             +
               CALLRKY=YES,                                            +
               SP=&ZG_DSASP.,                                          +
               BNDRY=PAGE,                                             +
               COND=NO
.*
         &LRxx 2,1               -> New storage save
.*
         &LRxx 0,1               -> New storage
         &LRxx 1,3               Storage len
         &SLRx 15,15             No source len
         MVCL  0,14              Clear storage
.*
         &LRxx 15,2              -> New storage
.*
         AIF   (&ZG_BAKR).CONT600 Skip chaining if BAKR is requested
         AIF   (&IS_64).LINK64
         ST    15,8(,13)         Save new storage in caller next
         ST    13,4(,15)         Save previus in our previous
         LM    14,14,12(13)      Restore R14
         LM    0,3,20(13)        Restore input registers
         AGO   .CONT620
.LINK64  ANOP
         STG   15,136(,13)       Save new storage in caller next
         STG   13,128(,15)       Save previous in our previous
         LMG   14,14,8(13)       Restore R14
         LMG   0,3,24(13)        Restore input registers
         AGO   .CONT620
.CONT600 ANOP
         MSTA  14                Save storage address (R15) in MSTA
.CONT620 ANOP
         &LRxx 13,15
         DROP  15
         AGO   .EXIT
.*
.*       Errors
.*
.ERR010  ANOP  ,
         MNOTE 8,'&MACNM. - DSA= must be YES|NO'
         AGO   .EXIT
.ERR020  ANOP  ,
         MNOTE 8,'&MACNM. - SAVE= must be SA|BAKR'
         AGO   .EXIT
.ERR030  ANOP  ,
         MNOTE 8,'&MACNM. - SAM64= must be NO|YES'
         AGO   .EXIT
.ERR040  ANOP  ,
         MNOTE 8,'&MACNM. - SAM64=YES may only be used with SAVE=BAKR'
         AGO   .EXIT
.*
.* Common exit
.*
.EXIT    ANOP  ,
         MEND
