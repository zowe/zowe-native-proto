/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 *
 */

// Code generated by tygo. DO NOT EDIT.
import type { Readable, Writable } from "node:stream";
import type { B64String } from "../types";
import type * as common from "./common.ts";

//////////
// source: requests.go

export interface ListDatasetsRequest extends common.CommandRequest, common.ListOptions, common.ListDatasetOptions {
  command: "listDatasets";
  /**
   * Pattern to match against dataset names
   */
  pattern: string;
  /**
   * Whether to include attributes in the response
   */
  attributes?: boolean;
}
export interface ListDsMembersRequest extends common.CommandRequest, common.ListOptions, common.ListDatasetOptions {
  command: "listDsMembers";
  /**
   * Dataset name
   */
  dsname: string;
  /**
   * Whether to include attributes in the response
   */
  attributes?: boolean;
}
export interface ReadDatasetRequest extends common.CommandRequest {
  command: "readDataset";
  /**
   * Desired encoding for the dataset (optional)
   */
  encoding?: string;
  /**
   * Source encoding of the dataset content (optional, defaults to UTF-8)
   */
  localEncoding?: string;
  /**
   * Volume serial for the data set (optional)
   */
  volume?: string;
  /**
   * Dataset name
   */
  dsname: string;
  /**
   * Stream to write contents to
   */
  stream?: Writable;
}
export interface WriteDatasetRequest extends common.CommandRequest {
  command: "writeDataset";
  /**
   * Desired encoding for the dataset (optional)
   */
  encoding?: string;
  /**
   * Source encoding of the dataset content (optional, defaults to UTF-8)
   */
  localEncoding?: string;
  /**
   * Last e-tag for the data set (optional, omit to overwrite)
   */
  etag?: string;
  /**
   * Volume serial for the data set (optional)
   */
  volume?: string;
  /**
   * Dataset name
   */
  dsname: string;
  /**
   * Dataset contents
   */
  data?: B64String;
  /**
   * Stream to read contents from
   */
  stream?: Readable;
}
export interface DeleteDatasetRequest extends common.CommandRequest {
  command: "deleteDataset";
  /**
   * Dataset name
   */
  dsname: string;
}
export interface RestoreDatasetRequest extends common.CommandRequest {
  command: "restoreDataset";
  /**
   * Dataset name
   */
  dsname: string;
}
export interface CreateDatasetRequest extends common.CommandRequest {
  command: "createDataset";
  /**
   * Dataset name
   */
  dsname: string;
  /**
   * Dataset attributes
   */
  attributes: common.DatasetAttributes;
}
export interface CreateMemberRequest extends common.CommandRequest {
  command: "createMember";
  /**
   * Dataset name
   */
  dsname: string;
}

//////////
// source: responses.go

export interface WriteDatasetResponse extends common.CommandResponse {
  /**
   * Whether the new data was stored successfully
   */
  success: boolean;
  /**
   * Dataset name
   */
  dataset: string;
  /**
   * Returned e-tag for the data set
   */
  etag: string;
  /**
   * Length of dataset contents in bytes (only used for streaming)
   */
  contentLen?: number /* int */;
}
export interface RestoreDatasetResponse extends common.CommandResponse {
  /**
   * Whether the dataset was restored successfully
   */
  success: boolean;
}
export interface ReadDatasetResponse extends common.CommandResponse {
  /**
   * Desired encoding for the dataset (optional)
   */
  encoding?: string;
  /**
   * Returned e-tag for the data set
   */
  etag: string;
  /**
   * Dataset name
   */
  dataset: string;
  /**
   * Dataset contents (omitted if streaming)
   */
  data: B64String;
  /**
   * Length of dataset contents in bytes (only used for streaming)
   */
  contentLen?: number /* int */;
}
export interface ListDatasetsResponse extends common.CommandResponse {
  /**
   * List of returned datasets
   */
  items: common.Dataset[];
  /**
   * Number of rows returned
   */
  returnedRows: number /* int */;
}
export interface ListDsMembersResponse extends common.CommandResponse {
  /**
   * List of returned dataset members
   */
  items: common.DsMember[];
  /**
   * Number of rows returned
   */
  returnedRows: number /* int */;
}
export interface GenericDatasetResponse extends common.CommandResponse {
  /**
   * Whether the dataset operation was successful
   */
  success: boolean;
  /**
   * Dataset name
   */
  dsname: string;
}
export type CreateDatasetResponse = GenericDatasetResponse;
export type CreateMemberResponse = GenericDatasetResponse;
export type DeleteDatasetResponse = GenericDatasetResponse;
